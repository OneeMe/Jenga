#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "GridMaterial"]

def Xform "Root"
{
    reorder nameChildren = ["Table", "Level1_2", "Level1_3", "Level1_4", "Level1_5", "Level1_6", "_5D589940_8ED5_496F_9DD8_35FE4129330B"]
    def Cylinder "Table" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform token axis = "Y"
        double height = 0.2
        rel material:binding = </Root/Table/GlossyBlackWoodPlank> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 0.03333333, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "GlossyBlackWoodPlank" (
            active = true
            references = @Materials/GlossyBlackWoodPlank.usdz@
        )
        {
            color3f inputs:Basecolor_Tint (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-56.812614, 67.17455)
                        float2 sizeInSubgraph = (160.5, 53)
                        int stackingOrderInSubgraph = 2329
                    }
                }
            )
            float2 inputs:UV_Scale (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-725.2588, 351.55255)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 2272
                    }
                }
            )
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "Dot"
            {
                float2 ui:nodegraph:node:size = (44, 18)
            }

            over "multiply"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "add"
            {
                float2 ui:nodegraph:node:size = (61.5, 36.5)
            }

            over "PreviewSurface"
            {
                float2 ui:nodegraph:node:size = (148.5, 199)
            }

            over "Mix"
            {
                float2 ui:nodegraph:node:size = (109, 145)
            }

            over "Swizzle"
            {
                float2 ui:nodegraph:node:size = (133.5, 40)
            }

            over "Swizzle_1"
            {
                float2 ui:nodegraph:node:size = (145.5, 53)
            }

            over "Multiply_1"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "BaseColor"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }

            over "Roughness"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }

            over "Metallic"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }

            over "Normal"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                float radius = 0.1
                token shapeType = "Sphere"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RigidBody" (
            active = false
        )
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }
    }

    def Xform "Group" (
        active = true
    )
    {
        def Xform "Level1" (
            active = true
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0.0027283898, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group/Level1/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }

        def Xform "Level1_1" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (0.7071067, 0, 0.70710677, 0)
            float3 xformOp:scale = (0.9999998, 0.9999998, 0.9999998)
            float3 xformOp:translate = (1.8626451e-9, 0.0057777613, 0.000085684005)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_1/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_1/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_1/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_1/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_1/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_1/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_1/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_1/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_1/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_1/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_1/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_1/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_1/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_1/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_1/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group/Level1_1/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_1/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_1/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_1/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_1/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_1/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_1/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_1/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_1/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_1/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_1/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_1/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_1/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_1/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_1/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_1/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_1/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_1/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_1/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_1/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_1/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_1/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_1/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_1/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_1/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_1/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_1/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_1/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_1/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_1/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_1/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_2" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.00004677777, 0.008793901, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_2/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_2/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_2/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_2/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_2/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_2/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_2/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_2/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_2/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_2/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_2/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_2/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_2/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_2/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_2/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group/Level1_2/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_2/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_2/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_2/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_2/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_2/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_2/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_2/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_2/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_2/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_2/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_2/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_2/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_2/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_2/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_2/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_2/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_2/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_2/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_2/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_2/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_2/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_2/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_2/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_2/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_2/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_2/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_2/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_2/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_2/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_2/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_2/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_2/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_2/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_2/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_2/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_2/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_2/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_2/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_3" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (0.7071067, 0, 0.70710677, 0)
            float3 xformOp:scale = (0.9999998, 0.9999998, 0.9999998)
            float3 xformOp:translate = (-0.00004677777, 0.011856868, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_3/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_3/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_3/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_3/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_3/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_3/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_3/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_3/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_3/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_3/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_3/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_3/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_3/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_3/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_3/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_3/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_3/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_3/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_3/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group/Level1_3/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_3/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_3/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_3/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_3/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_3/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_3/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_3/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_3/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_3/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_3/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_3/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_3/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_3/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_3/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_3/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_3/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_3/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_3/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_3/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_3/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_3/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_3/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_3/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_3/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_3/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_3/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_3/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_3/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_3/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_3/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_3/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_3/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_3/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_3/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_3/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_3/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_3/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_3/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_4" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.00004677777, 0.014885821, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_4/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_4/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_4/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_4/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_4/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_4/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_4/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_4/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_4/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_4/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_4/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_4/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_4/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_4/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_4/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_4/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_4/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_4/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_4/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group/Level1_4/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_4/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_4/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_4/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_4/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_4/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_4/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_4/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_4/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_4/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_4/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_4/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_4/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_4/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_4/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_4/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_4/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_4/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_4/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_4/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_4/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_4/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_4/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_4/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_4/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_4/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_4/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_4/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_4/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_4/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_4/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_4/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_4/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_4/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_4/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_4/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_4/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_4/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_4/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_5" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (0.7071067, 0, 0.70710677, 0)
            float3 xformOp:scale = (0.9999998, 0.9999998, 0.9999998)
            float3 xformOp:translate = (-0.00004677777, 0.017969891, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_5/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_5/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_5/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_5/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_5/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_5/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_5/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_5/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_5/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_5/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_5/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_5/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_5/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_5/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_5/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_5/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_5/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_5/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_5/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group/Level1_5/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_5/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_5/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_5/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_5/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_5/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_5/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_5/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_5/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_5/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_5/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_5/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_5/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_5/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_5/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_5/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_5/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_5/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_5/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_5/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_5/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_5/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_5/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_5/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_5/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_5/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_5/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_5/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_5/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_5/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_5/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_5/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_5/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_5/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_5/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_5/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_5/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_5/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_5/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_6" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.00004677777, 0.021008313, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_6/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_6/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_6/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_6/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_6/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_6/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_6/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_6/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_6/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_6/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_6/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_6/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_6/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_6/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_6/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_6/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_6/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_6/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_6/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group/Level1_6/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_6/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_6/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_6/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_6/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_6/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_6/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_6/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_6/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_6/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_6/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_6/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_6/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_6/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_6/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_6/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_6/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_6/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_6/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_6/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_6/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_6/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_6/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_6/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_6/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_6/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_6/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_6/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_6/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_6/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_6/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_6/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_6/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_6/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_6/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_6/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_6/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_6/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_6/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_7" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.00004677777, 0.023940187, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_7/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_7/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_7/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_7/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_7/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_7/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_7/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_7/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_7/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_7/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_7/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_7/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_7/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_7/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_7/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_7/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_7/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_7/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_7/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group/Level1_7/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_7/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_7/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_7/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_7/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_7/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_7/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_7/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_7/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_7/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_7/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_7/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_7/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_7/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_7/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_7/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_7/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_7/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_7/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_7/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group/Level1_7/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_7/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_7/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group/Level1_7/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group/Level1_7/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group/Level1_7/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group/Level1_7/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group/Level1_7/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group/Level1_7/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group/Level1_7/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_7/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group/Level1_7/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group/Level1_7/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group/Level1_7/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group/Level1_7/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_7/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_7/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group/Level1_7/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group/Level1_7/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }
    }

    def Xform "Group_1" (
        active = true
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0.024223827, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "Level1" (
            active = true
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0.0027283898, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group_1/Level1/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_1" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (0.7071067, 0, 0.70710677, 0)
            float3 xformOp:scale = (0.9999998, 0.9999998, 0.9999998)
            float3 xformOp:translate = (1.8626451e-9, 0.0057777613, 0.000085684005)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_1/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_1/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_1/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_1/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_1/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_1/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_1/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_1/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_1/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_1/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_1/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_1/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_1/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_1/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_1/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group_1/Level1_1/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_1/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_1/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_2" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.00004677777, 0.008793901, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_2/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_2/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_2/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_2/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_2/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_2/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_2/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_2/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_2/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_2/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_2/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_2/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_2/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_2/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_2/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group_1/Level1_2/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_2/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_2/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_3" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (0.7071067, 0, 0.70710677, 0)
            float3 xformOp:scale = (0.9999998, 0.9999998, 0.9999998)
            float3 xformOp:translate = (-0.00004677777, 0.011856868, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_3/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_3/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_3/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_3/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_3/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_3/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_3/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_3/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_3/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_3/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_3/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_3/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_3/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_3/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_3/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_3/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_3/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_3/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_3/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group_1/Level1_3/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_3/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_3/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_4" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.00004677777, 0.014885821, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_4/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_4/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_4/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_4/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_4/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_4/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_4/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_4/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_4/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_4/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_4/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_4/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_4/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_4/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_4/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_4/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_4/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_4/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_4/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group_1/Level1_4/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_4/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_4/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_5" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (0.7071067, 0, 0.70710677, 0)
            float3 xformOp:scale = (0.9999998, 0.9999998, 0.9999998)
            float3 xformOp:translate = (-0.00004677777, 0.017969891, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_5/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_5/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_5/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_5/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_5/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_5/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_5/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_5/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_5/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_5/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_5/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_5/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_5/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_5/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_5/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_5/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_5/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_5/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_5/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group_1/Level1_5/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_5/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_5/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_6" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.00004677777, 0.021008313, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_6/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_6/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_6/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_6/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_6/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_6/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_6/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_6/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_6/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_6/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_6/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_6/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_6/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_6/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_6/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_6/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_6/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_6/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_6/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group_1/Level1_6/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_6/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_6/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_7" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.00004677777, 0.023940187, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_7/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_7/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_7/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_7/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_7/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_7/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_7/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_7/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_7/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_7/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_7/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_7/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_7/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_7/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_7/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_7/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_7/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_7/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_7/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group_1/Level1_7/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_7/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_1/Level1_7/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }
    }

    def Xform "Group_2" (
        active = true
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0.048684936, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "Level1" (
            active = true
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0.0027283898, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group_2/Level1/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_1" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (0.7071067, 0, 0.70710677, 0)
            float3 xformOp:scale = (0.9999998, 0.9999998, 0.9999998)
            float3 xformOp:translate = (1.8626451e-9, 0.0057777613, 0.000085684005)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_1/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_1/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_1/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_1/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_1/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_1/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_1/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_1/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_1/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_1/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_1/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_1/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_1/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_1/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_1/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_1/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group_2/Level1_1/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_1/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_1/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_2" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.00004677777, 0.008793901, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_2/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_2/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_2/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_2/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_2/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_2/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_2/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_2/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_2/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_2/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_2/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_2/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_2/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_2/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_2/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group_2/Level1_2/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_2/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_2/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_3" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (0.7071067, 0, 0.70710677, 0)
            float3 xformOp:scale = (0.9999998, 0.9999998, 0.9999998)
            float3 xformOp:translate = (-0.00004677777, 0.011856868, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_3/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_3/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_3/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_3/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_3/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_3/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_3/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_3/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_3/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_3/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_3/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_3/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_3/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_3/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_3/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_3/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_3/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_3/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_3/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group_2/Level1_3/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_3/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_3/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_4" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.00004677777, 0.014885821, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_4/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_4/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_4/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_4/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_4/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_4/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_4/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_4/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_4/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_4/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_4/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_4/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_4/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_4/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_4/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_4/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_4/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_4/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_4/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group_2/Level1_4/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_4/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_4/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_5" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (0.7071067, 0, 0.70710677, 0)
            float3 xformOp:scale = (0.9999998, 0.9999998, 0.9999998)
            float3 xformOp:translate = (-0.00004677777, 0.017969891, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_5/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_5/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_5/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_5/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_5/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_5/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_5/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_5/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_5/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_5/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_5/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_5/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_5/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_5/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_5/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_5/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_5/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_5/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_5/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group_2/Level1_5/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_5/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_5/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_6" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.00004677777, 0.021008313, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_6/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_6/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_6/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_6/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_6/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_6/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_6/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_6/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_6/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_6/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_6/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_6/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_6/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_6/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_6/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_6/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_6/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_6/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_6/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group_2/Level1_6/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_6/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_6/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }

        def Xform "Level1_7" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
        )
        {
            reorder nameChildren = ["BlockB", "Block", "Block_1", "Block_2"]
            quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.00004677777, 0.023940187, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Block" (
                active = true
                references = @Block.usda@
            )
            {
                reorder nameChildren = ["BlockB", "Block"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-0.0000073118135, 0, 0.005059034)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        color3f inputs:Basecolor_Tint (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-56.812614, 67.17455)
                                    float2 sizeInSubgraph = (160.5, 53)
                                    int stackingOrderInSubgraph = 2352
                                }
                            }
                        )
                        float2 inputs:UV_Scale (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-725.2588, 351.55255)
                                    float2 sizeInSubgraph = (138.5, 53)
                                    int stackingOrderInSubgraph = 2272
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "Dot"
                        {
                            float2 ui:nodegraph:node:size = (44, 18)
                        }

                        over "multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "add"
                        {
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "PreviewSurface"
                        {
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Mix"
                        {
                            float2 ui:nodegraph:node:size = (109, 145)
                        }

                        over "Swizzle"
                        {
                            float2 ui:nodegraph:node:size = (133.5, 40)
                        }

                        over "Swizzle_1"
                        {
                            float2 ui:nodegraph:node:size = (145.5, 53)
                        }

                        over "Multiply_1"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "BaseColor"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Roughness"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Metallic"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }

                        over "Normal"
                        {
                            float2 ui:nodegraph:node:size = (158.5, 235)
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_7/Block/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_7/Block/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_7/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_7/Block/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_7/Block/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_7/Block/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_7/Block/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_7/Block/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_7/Block/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_7/Block/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_7/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_7/Block/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_7/Block/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_7/Block/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_7/Block/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_7/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_7/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_7/Block/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_7/Block/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "Block_2" (
                active = true
                references = @Block.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0.0000026784837, 0, -0.0050049676)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Block"
                {
                    over "Wood_Plank"
                    {
                        token outputs:mtlx:surface.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank/PreviewSurface.outputs:out>

                        over "add"
                        {
                            float3 inputs:in1.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank/multiply.outputs:out>
                        }

                        over "Swizzle_1"
                        {
                            color4f inputs:in.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Swizzle"
                        {
                            color4f inputs:in.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank/BaseColor.outputs:out>
                        }

                        over "Multiply_1"
                        {
                            color3f inputs:in1.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank.inputs:Basecolor_Tint>
                            color3f inputs:in2.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                        }

                        over "Mix"
                        {
                            color3f inputs:bg.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank/Swizzle_1.outputs:out>
                            color3f inputs:fg.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank/Multiply_1.outputs:out>
                            float inputs:mix.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank/Swizzle.outputs:out>
                        }

                        over "Dot"
                        {
                            float2 inputs:in.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank.inputs:UV_Scale>
                        }

                        over "Metallic"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "PreviewSurface"
                        {
                            color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank/Mix.outputs:out>
                            float inputs:metallic.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank/Metallic.outputs:out>
                            float3 inputs:normal.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank/add.outputs:out>
                            float inputs:roughness.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank/Roughness.outputs:out>
                        }

                        over "Normal"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "BaseColor"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "Roughness"
                        {
                            float2 inputs:uvtiling.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank/Dot.outputs:out>
                        }

                        over "multiply"
                        {
                            float3 inputs:in1.connect = </Root/Group_2/Level1_7/Block_2/Block/Wood_Plank/Normal.outputs:out>
                        }
                    }
                }

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_7/Block_2/Wood_Plank/Normal.outputs:out>
                    }
                }
            }

            def "BlockB" (
                active = true
                references = @BlockB.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Wood_Plank"
                {
                    token outputs:mtlx:surface.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank/PreviewSurface.outputs:out>

                    over "add"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank/multiply.outputs:out>
                    }

                    over "Swizzle_1"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Swizzle"
                    {
                        color4f inputs:in.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank/BaseColor.outputs:out>
                    }

                    over "Multiply_1"
                    {
                        color3f inputs:in1.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank.inputs:Basecolor_Tint>
                        color3f inputs:in2.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                    }

                    over "Mix"
                    {
                        color3f inputs:bg.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank/Swizzle_1.outputs:out>
                        color3f inputs:fg.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank/Multiply_1.outputs:out>
                        float inputs:mix.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank/Swizzle.outputs:out>
                    }

                    over "Dot"
                    {
                        float2 inputs:in.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank.inputs:UV_Scale>
                    }

                    over "Metallic"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "PreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank/Mix.outputs:out>
                        float inputs:metallic.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank/Metallic.outputs:out>
                        float3 inputs:normal.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank/add.outputs:out>
                        float inputs:roughness.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank/Roughness.outputs:out>
                    }

                    over "Normal"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "BaseColor"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "Roughness"
                    {
                        float2 inputs:uvtiling.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank/Dot.outputs:out>
                    }

                    over "multiply"
                    {
                        float3 inputs:in1.connect = </Root/Group_2/Level1_7/BlockB/Wood_Plank/Normal.outputs:out>
                    }
                }
            }
        }
    }
}

